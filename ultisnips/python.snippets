global !p

import vim
import regex

def create_class(c_type):
	"""
	Creates a class

	Arguments:
		c_type (str): The type of class to create. Can be "abc", "base", or "concrete"
	"""
	if snip.tabstop == 0:
		# Setup
		class_map = {"abc": _create_abc, "base": _create_base}

		# Get the rv
		class_constructor = class_map[c_type]
		rv = class_constructor(snip)

		# Delete current snippet contents
		_delete(snip)

		# Write in the return value
		snip.expand_anon(rv)


def create_property(abstract, getter):
	"""
	Creates a property

	Arguments:
		abstract (bool): Whether the property is abstract
		getter (bool): Whether the property is only a getter
	"""
	if snip.tabstop == 0:
		# Setup
		abstract_str = "\n\t@abstractmethod" if abstract else ""

		# Parse tabstops
		name, return_type, description = _prop_tabstops(snip)

		# Create the getter
		rv = _create_function(1, name, "", return_type, description, is_method=True, start_str=f"@property{abstract_str}")

		if not getter:
			# Marker to jump back to getter
			rv += "<++>\n\t"

			# Return of getter is the type of the setter
			r_type = _parse_return(return_type)
			args = f"val: {r_type}"

			# Create the setter
			rv += _create_function(1, name, args, "", description, start_str=f"\n\t@{name}.setter{abstract_str}")

		# Delete the current contents of the snippet
		_delete(snip)

		# Write in the property text
		snip.expand_anon(rv)


def create_function(min_tabs, is_method=True, start_str=""):
	"""
	Generates a docstring for the given function or method.

	Arguments:
		min_tabs (int): The number of tabs for the function definition
		is_method (bool): Whether to create a method. Defaults to True
		start_str (str): A string that starts the function definition. Defaults to ""
	"""
	if snip.tabstop == 0:  # Once all the fields have been filled.
		name, args, return_type, description = _fn_tabstops(snip)
		out_str = _create_function(min_tabs, name, args, return_type, description, is_method, start_str)
		_delete(snip)
		snip.expand_anon(out_str)


def _abc_tabstops(snip):
	"""
	Gets the tabstop values for an ABC
	"""
	general_map = {"": "<++>"}
	args_map = {"Arguments": ""}

	# Get tabstop text
	name = general_map.get(snip.tabstops[1].current_text,
		f"{snip.tabstops[1].current_text}")
	args = args_map.get(snip.tabstops[2].current_text,
		f"{snip.tabstops[2].current_text}")

	return name, args


def _prop_tabstops(snip):
	"""
	Gets the tabstop values for a property
	"""
	general_map = {"": "<++>"}
	return_map = {"": ":", "Return Type": ":"}

	# Get tabstop text
	name = general_map.get(snip.tabstops[1].current_text,
		f"{snip.tabstops[1].current_text}")
	return_type = return_map.get(snip.tabstops[2].current_text,
		f" -> {snip.tabstops[2].current_text}:")
	description = general_map.get(snip.tabstops[3].current_text,
		f"{snip.tabstops[3].current_text}")

	return name, return_type, description


def _fn_tabstops(snip):
	"""
	Gets the tabstop values for a function
	"""
	general_map = {"": "<++>"}
	args_map = {"Arguments": ""}
	return_map = {"": ":", "Return Type": ":"}

	# Get tabstop text
	name = general_map.get(snip.tabstops[1].current_text,
		f"{snip.tabstops[1].current_text}")
	args = args_map.get(snip.tabstops[2].current_text,
		f"{snip.tabstops[2].current_text}")
	return_type = return_map.get(snip.tabstops[3].current_text,
		f" -> {snip.tabstops[3].current_text}:")
	description = general_map.get(snip.tabstops[4].current_text,
		f"{snip.tabstops[4].current_text}")

	return name, args, return_type, description


def _parse_args(args, dtc, atc):
	"""
	Parses the args into a google docstring format

	Arguments:
		args (str): The arguments of a function or method
		dtc (str): The tab character for the description
		atc (str): The tab character for the args.

	Returns:
		args (str): The arguments of a function of method in
			a google docstring format.

	Notes:
		Modified from https://stackoverflow.com/a/26809037
	"""
	# Don't continue if no arguments
	if args == "":
		return args

	# Split at , outside of []
	google_str = []
	bracket_level = 0
	curr = []
	for c in (args + ","):
		if c == "," and bracket_level == 0:
			google_str.append("".join(curr))
			curr = []
		elif c == " " and bracket_level == 0:
			continue
		else:
			if c == "[":
				bracket_level += 1
			elif c == "]":
				bracket_level -= 1
			curr.append(c)

	# Split at : when possible
	google_str = [s.split(":") for s in google_str]

	# Create the new args string
	args = f"\n{dtc}Arguments:"
	for s in google_str:
		# If splitting at : was succesful, insert the type
		if len(s) == 2:
			args += f"\n{atc + s[0]} ({s[1]}): <++>"
		# If splitting at : was not succesful, no type
		else:
			args += f"\n{atc + s[0]}: <++>"

	args += "\n"

	return args


def _delete(snip):
	"""
	Deletes the snippet contents
	"""
	# Get snippet lines
	line_ix = 0
	first = snip.snippet_start[line_ix]
	last = snip.snippet_end[line_ix]

	# Subtract one since range end is off-by-one
	for i in range(last, first - 1, -1):
		del snip.buffer[i]


def _parse_return(return_type):
	"""
	Parses the return type.

	Arguments:
		return_type (str): The string representing the return type with func_def formatting.

	Returns:
		r_type (str): The return type with docstring formatting.
	"""
	r_type = ""
	if not return_type == "":
		r = regex.compile(f'( -> )(.*(?=:))')
		r_type = r.split(return_type)[-2]

	return r_type


def _create_function(min_tabs, name, args, return_type, description, is_method=True, start_str=""):
	"""
	Generates a docstring for the given function or method.

	Arguments:
		min_tabs (int): The number of tabs for the function definition
		name (str): The name of the function
		args (str): The args of the function
		return_type (str): The return type of the function
		description (str): The description of function
		is_method (bool): Whether to create a method. Defaults to True
		start_str (str): A string that starts the function definition. Defaults to ""
	"""
	# Setup
	tab_char = "\t"
	fn_tab_char = tab_char * min_tabs
	desc_tab_char = tab_char * (min_tabs + 1)
	args_tab_char = tab_char * (min_tabs + 2)
	docstring = f"\"\"\"\n{desc_tab_char + description}\n"

	# Parse the args into a google-style docstring
	docstring += _parse_args(args, desc_tab_char, args_tab_char)

	# Parse the return type into a google-style docstring
	r_type = _parse_return(return_type)
	if r_type == "":
		return_type = ":"
	else:
		r_type = f"\n{desc_tab_char}Returns:\n{args_tab_char}" + r_type + ": <++>"
	docstring += r_type

	# Close docstring
	docstring += f"\n{desc_tab_char}\"\"\"\n{desc_tab_char}"

	if is_method:
		if args == "":
			args = "self"
		else:
			args = "self, " + args
	if start_str != "":
		start_str = fn_tab_char + start_str + "\n"
	# Define the function
	func_def = f"{start_str}{fn_tab_char}def {name}({args})" + return_type + f"\n{desc_tab_char}"

	out_str = func_def + docstring
	return out_str


def _create_abc(snip):
	"""
	Creates an ABC from the tabstops

	Returns:
		rv (str): The text of the ABC
	"""
	name, args = _abc_tabstops(snip)
	c_type = _classname(name)	

	rv = (f"\"\"\"\nImplements {name}\n\"\"\""
		+ f"\n\nfrom abc import ABC, abstractmethod\n\n\n"
		+ f"class {name}(ABC):\n"
		+ f"\t\"\"\"\n\tThe abstract class for {c_type}.\n\t\"\"\"\n\n")
	rv += _create_function(min_tabs=1, name="__init__", args=args, return_type="", description=f"The init method for {name}", is_method=True)

	return rv

def _classname(cname):
	"""
	Gets the name of the class without the prefix

	Arguments:
		cname (str): The name of the class with the prefix

	Returns:
		c_type (str): The name of the class without the prefix.
	"""
	pattern = "([A-Z][a-z]*)(.*)"  # Group 1 is first capitalised word
	match = re.match(pattern, cname)

	c_type = "Invalid Class Name"
	if match:
		c_type = match.group(2)

		if c_type.endswith("s"):
			c_type += "es"
		if c_type.endswith("y"):
			c_type = c_type[:-1]
			c_type += "ies"
		else:
			c_type += "s"

	return c_type
endglobal


post_jump "create_function(min_tabs=0, is_method=False)"
snippet fn "function definition"
# Define your function here.
# ${1:Function Name}
# ${2:Arguments}
# ${3:Return Type}
# ${4:Description}
endsnippet

post_jump "create_function(min_tabs=1)"
snippet md "method definition"
# Define your method here.
# ${1:Method Name}
# ${2:Arguments}
# ${3:Return Type}
# ${4:Description}
endsnippet

post_jump "create_function(min_tabs=1, is_method=False, start_str="@staticmethod")"
snippet smd "staticmethod definition"
# Define your staticmethod here.
# ${1:Method Name}
# ${2:Arguments}
# ${3:Return Type}
# ${4:Description}
endsnippet

post_jump "create_function(min_tabs=1, is_method=False, start_str="@abstractmethod")"
snippet amd "abstractmethod definition"
# Define your abstractmethod here.
# ${1:Method Name}
# ${2:Arguments}
# ${3:Return Type}
# ${4:Description}
endsnippet

post_jump "create_function(min_tabs=1, is_method=False, start_str="@staticmethod\n\t@abstractmethod")"
snippet asmd "abstract staticmethod definition"
# Define your abstract staticmethod here.
# ${1:Method Name}
# ${2:Arguments}
# ${3:Return Type}
# ${4:Description}
endsnippet

post_jump "create_property(abstract=True, getter=False)"
snippet aprop "abstract property definition"
# Define your abstract property here.
# ${1:Property Name}
# ${2:Return Type}
# ${3:Description}
endsnippet

post_jump "create_property(abstract=False, getter=False)"
snippet prop "property definition"
# Define your property here.
# ${1:Property Name}
# ${2:Return Type}
# ${3:Description}
endsnippet

post_jump "create_property(abstract=True, getter=True)"
snippet agprop "abstract property (getter only) definition"
# Define your abstract getter property here.
# ${1:Property Name}
# ${2:Return Type}
# ${3:Description}
endsnippet

post_jump "create_property(abstract=False, getter=True)"
snippet gprop "property (getter only) definition"
# Define your getter property here.
# ${1:Property Name}
# ${2:Return Type}
# ${3:Description}
endsnippet

post_jump "create_class(c_type="abc")"
snippet abc "Abstract Base Class definition"
# Define your ABC here
# ${1:Class Name}
# ${2:Arguments}
endsnippet
