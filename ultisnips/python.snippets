global !p

import vim
import regex

def parse_args(args):
	"""
	Parses the args into a google docstring format

	Arguments:
		args (str): The arguments of a function or method

	Returns:
		args (str): The arguments of a function of method in
			a google docstring format.
	"""
	# Don't continue if 
	if args == "":
		return args

	google_str = ["\n\tArguments:"]
	r = regex.compile(r'(\[(?:[^\[\]]++|\g<1>)*\])(*SKIP)(*FAIL)|\s*,\s*')
	args_split = r.split(args)

	# Get rid of NoneTypes
	args_split = list(filter(lambda x: x!=None, args_split))

	for ss in args_split:
		ss_list = ss.split(": ")
		if len(ss_list) == 2:
			google_str.append(
				f"{ss_list[0]} ({ss_list[1]}): <++>"
			)
		else:
			google_str.append(f"{ss_list[0]}: <++>")
		args = "\n\t\t".join(google_str)

	return args

def create_function():
	"""
	Generates a docstring for the given function or method.
	"""
	if snip.tabstop == 0:  # Once all the fields have been filled.
		# Setup
		args_map = {"Arguments": ""}
		return_map = {"": ":", "Return Type": ":"}

		# Get tabstop text
		name = snip.tabstops[1].current_text
		args = args_map.get(snip.tabstops[2].current_text,
			f"{snip.tabstops[2].current_text}")
		return_type = return_map.get(snip.tabstops[3].current_text,
			f" -> {snip.tabstops[3].current_text}:")
		description = snip.tabstops[4].current_text

		# Get snippet lines
		line_ix = 0
		first = snip.snippet_start[line_ix]
		last = snip.snippet_end[line_ix]

		# Subtract one since range end is off-by-one
		for i in range(last, first - 1, -1):
			del snip.buffer[i]

		# Define the function
		func_def = f"def {name}({args})" + return_type + "\n\t"
		docstring = f"\"\"\"\n\t{description}\n\t"

		# Parse the args into a google-style docstring
		docstring += parse_args(args)

		# Parse the return type into a google-style docstring
		if not return_type == "":
			r = regex.compile(f'( ?-> )(.*(?=:))')
			return_type = r.split(return_type)[-2]
			return_type = "\n\n\tReturns:\n\t\t" + return_type + ":"

		docstring += return_type

		# Close docstring
		docstring += "\n\t\"\"\"\n\t"

		snip.expand_anon(func_def + docstring)
endglobal


post_jump "create_function()"
snippet fn "function declaration"
# Define your function here.
# ${1:Function Name}
# ${2:Arguments}
# ${3:Return Type}
# ${4:Description}
endsnippet

